<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Views="clr-namespace:CMiX.Views"
                    xmlns:Controls="clr-namespace:CMiX.MVVM.Controls"
                    xmlns:Resources="clr-namespace:CMiX.MVVM.Resources">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml" />
        <ResourceDictionary Source="Values.xaml"/>
        <ResourceDictionary>
            <Resources:DoubleToStringConverter x:Key="DoubleToString" />
            <Resources:DoubleToPersistantStringConverter x:Key="DoubleToPersistantString" />
            <Trigger x:Key="Trigger0" Property="FrameworkElement.IsMouseOver" Value="True">
                <Setter Property="FrameworkElement.Cursor" Value="Arrow"/>
            </Trigger>
            <DataTrigger x:Key="Trigger1" Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter Property="FrameworkElement.Visibility" Value="Hidden" />
            </DataTrigger>
            <MultiDataTrigger x:Key="Trigger2">
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="FrameworkElement.Visibility" Value="Visible" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger x:Key="Trigger3">
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="FrameworkElement.Visibility" Value="Hidden" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </ResourceDictionary>

    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="RepeatButtonDecrease" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{StaticResource Color}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonDecreaseOver" TargetType="{x:Type RepeatButton}"
        BasedOn="{StaticResource RepeatButtonDecrease}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border  Background="{StaticResource HighLightColor}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonIncrease" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{StaticResource DarkColor}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonIncreaseOver" TargetType="{x:Type RepeatButton}"
           BasedOn="{StaticResource RepeatButtonIncrease}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{StaticResource Color}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="borderMask" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource DarkerColor}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Style.Triggers>
            <DataTrigger  Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Top">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusTop}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Bottom">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusBottom}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Middle">
                <Setter Property="CornerRadius" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Default">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusDefault}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
 
    <Style x:Key="CMiXSliderStyle" TargetType="{x:Type Controls:CMiXSlider}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Controls:MouseDownHelper.IsEnabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">

                    <Border x:Name="mainBorder" SnapsToDevicePixels="True">
                        <Grid>
                            <Border x:Name="borderMask" Style="{StaticResource borderMask}"/>
                            <Border x:Name="sliderBorder" Background="Transparent">
                                <Border.OpacityMask>
                                    <VisualBrush Visual="{Binding ElementName=borderMask}"/>
                                </Border.OpacityMask>
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger  Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                                <Track>
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton
                                        x:Name="RBD"
                                        Command="{x:Static Slider.DecreaseLarge}"
                                        Style="{StaticResource RepeatButtonDecrease}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton
                                        x:Name="RBI"
                                        Command="{x:Static Slider.IncreaseLarge}"
                                        Style="{StaticResource RepeatButtonIncrease}" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Border>
                            
                            <TextBlock x:Name="sliderName"
                                    VerticalAlignment="Center" 
                                    HorizontalAlignment="Left"
                                    Text="{Binding Path=Caption, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}" 
                                    Padding="8, 0" 
                                    IsHitTestVisible="False"/>
                            
                            <Label x:Name="textDisplay" 
                                    Padding="0, 0, 8, 0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Right"
                                    Content="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource DoubleToString}, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <TextBox x:Name="textInput" 
                                     Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                     Style="{StaticResource SliderTextBox}"
                                     Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource DoubleToString}, UpdateSourceTrigger=LostFocus, RelativeSource={RelativeSource TemplatedParent}}">
                                <TextBox.OpacityMask>
                                    <VisualBrush Visual="{Binding ElementName=borderMask}"/>
                                </TextBox.OpacityMask>
                            </TextBox>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <DataTrigger  Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                            <Setter TargetName="sliderName" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger  Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter TargetName="sliderName" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RBD" Property="Style" Value="{DynamicResource RepeatButtonDecreaseOver}" />
                            <Setter TargetName="RBI" Property="Style" Value="{DynamicResource RepeatButtonIncreaseOver}" />
                        </Trigger>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="mainBorder" Property="Opacity" Value="0.5" />
                        </Trigger>
                        
                        <Trigger Property="Controls:MouseDownHelper.IsMouseLeftButtonDown" Value="True">
                            <Setter Property="Cursor" Value="None"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    
    
    <Style x:Key="SliderTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="8, 0"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource TextBase}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource SuperHighLightColor}"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextBase}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" CornerRadius="0" Background="{StaticResource SuperHighDarkerColor}">
                        <ScrollViewer x:Name="PART_ContentHost"
                                    Focusable="False"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource SuperHighDarkerColor}" />
                        </Trigger>
                        
                        <DataTrigger  Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <DataTrigger  Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Top">
                            <Setter TargetName="border" Property="CornerRadius" Value="{StaticResource CornerRadiusTop}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Bottom">
                            <Setter TargetName="border" Property="CornerRadius" Value="{StaticResource CornerRadiusBottom}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Middle">
                            <Setter TargetName="border" Property="CornerRadius" Value="0"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Default">
                            <Setter TargetName="border" Property="CornerRadius" Value="{StaticResource CornerRadiusDefault}"/>
                        </DataTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style x:Key="DistanceSliderStyle" TargetType="{x:Type Controls:DistanceSlider}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:DistanceSlider}">
                    <Border x:Name="mainBorder"
                            Style="{StaticResource distanceSliderBorder}">
                        <Grid>
                            <TextBox x:Name="valueInput" 
                                        Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource SliderTextBox}"
                                        Text="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource DoubleToString}, UpdateSourceTrigger=LostFocus, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <DockPanel>
                                <Button x:Name="SubButton" 
                                        Content="-" 
                                        DockPanel.Dock="Left"
                                        Width="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource SubButton}">
                                </Button>
                                <Button x:Name="AddButton" 
                                        Content="+" 
                                        DockPanel.Dock="Right"
                                        Width="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource AddButton}">
                                </Button>
                                <Border x:Name="borderValueDisplay" 
                                        Background="Transparent">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                            <Setter Property="Visibility" Value="Visible"/>
                                            <Style.Triggers>
                                                <DataTrigger  Binding="{Binding Path=IsEditing, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <Label x:Name="valueDisplay" 
                                        Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                        Padding="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{Binding Path=Value, Mode=TwoWay, Converter={StaticResource DoubleToString}, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}">
                                    </Label>
                                </Border>
                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Border x:Key="BorderMask">

    </Border>

    <Style x:Key="distanceSliderBorder" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource DarkColor}"/>
        <Setter Property="Controls:MouseDownHelper.IsEnabled" Value="True"/>
        <Style.Triggers>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Color}"/>
                <Setter Property="Cursor" Value="SizeWE"/>
            </Trigger>
            
            <Trigger Property="Controls:MouseDownHelper.IsMouseLeftButtonDown" Value="True">
                <Setter Property="Cursor" Value="None"/>
            </Trigger>

            <DataTrigger  Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Top">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusTop}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Bottom">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusBottom}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Middle">
                <Setter Property="CornerRadius" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Position, RelativeSource={RelativeSource TemplatedParent}}" Value="Default">
                <Setter Property="CornerRadius" Value="{StaticResource CornerRadiusDefault}"/>
            </DataTrigger>
            
        </Style.Triggers>
    </Style>


    <Style x:Key="AddButton" TargetType="Button" BasedOn="{StaticResource ButtonRoundedRight}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="SubButton" TargetType="Button" BasedOn="{StaticResource ButtonRoundedLeft}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="AddButtonBottom" TargetType="Button" BasedOn="{StaticResource ButtonRoundedBottomRight}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="SubButtonBottom" TargetType="Button" BasedOn="{StaticResource ButtonRoundedBottomLeft}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="SubButtonTop" TargetType="Button" BasedOn="{StaticResource ButtonRoundedTopLeft}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="AddButtonTop" TargetType="Button" BasedOn="{StaticResource ButtonRoundedTopRight}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="SubButtonMiddle" TargetType="Button" BasedOn="{StaticResource ButtonSquare}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>

    <Style x:Key="AddButtonMiddle" TargetType="Button" BasedOn="{StaticResource ButtonSquare}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <StaticResource ResourceKey="Trigger0" />
            <StaticResource ResourceKey="Trigger1" />
            <StaticResource ResourceKey="Trigger2" />
            <StaticResource ResourceKey="Trigger3" />
        </Style.Triggers>
    </Style>
    
    
</ResourceDictionary>